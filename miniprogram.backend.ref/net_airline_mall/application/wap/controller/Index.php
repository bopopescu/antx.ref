<?php

namespace app\wap\controller;

use app\home\model\AccountLog;
use Payment\Pay;
use think\Controller;
use think\Db;
use think\facade\Request;
use EasyWeChat\Factory;
use think\Log;

class Index extends Controller
{
    public $config;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        header('content-type:text/html;charset=utf-8');
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept");
        header('Access-Control-Allow-Methods: GET, POST, PUT');
        ksort($_POST);
        ksort($_GET);
        $this->config = [
            'app_id'        => config('wapwxpayConfig')['appid'],
            'secret'        => config('wapwxpayConfig')['secret'],//公众号
            'token'         => 'hngpmall',
            'aes_key'       => '1f070lMYE9Hj2dI7A7vTftkAGiPfKCTSWz2G0D2dfhF',
            'response_type' => 'array',//指定 API 调用返回结果的类型：array(default)/collection/object/raw/自定义类名
            'oauth'         => [
                //'scopes'   => ['snsapi_login'],//开放平台
                'scopes'   => ['snsapi_userinfo'],
                'callback' => '/wap/index/weixinnotify', //框架自动获取域名
            ],
        ];

    }

    public function index()
    {
        return view();
    }

    #*************************************************************************#

    public function pmhouse()
    {
        session('targetUrl', Request::domain() . Request::url());
        return view();
    }

    public function islogin()
    {
        $token = input('token');
        if (!$token) {
            ajaxmsg('无权限', -1);
        }
        $map     = [];
        $map[]   = ['token', '=', $token];
        $user_id = Db::name("user")->where($map)->value("user_id");
        if ($user_id > 0) {
            return $user_id;
        } else {
            ajaxmsg('未登录', -1);
        }
    }

    public function rechargejspay()
    {

        $user_id    = $this->islogin();
        $user       = Db::name("user")->find($user_id);
        $order_sn   = get_order_sn();
        $order_type = input("order_type", 1);
        $money      = input("money", 0);

        $rechargeData                = [];
        $rechargeData['order_sn']    = $order_sn;
        $rechargeData['money']       = $money;
        $rechargeData['user_id']     = $user_id;
        $rechargeData['order_type']  = $order_type;
        $rechargeData['note']        = input('note', '');
        $rechargeData['create_time'] = time();
        $pay_code                    = $order_type == 1 ? 'alipay' : 'weixin';
        $config                      = json_decode(Db::name('payment')->where('pay_code', $pay_code)->value('pay_config'), true);
        if (!$config) {
            ajaxmsg('支付参数错误', 0);
        }
        $id = Db::name("user_recharge")->insertGetId($rechargeData);
        if (!$id) {
            ajaxmsg('支付订单生成失败', 0);
        }

        $jsapi = input('jsapi', 1);#1:公众号，2：小程序

        if ($jsapi == 1) {
            $config = [
                'app_id'     => config('wapwxpayConfig')['appid'],
                'key'        => config('wapwxpayConfig')['key'],
                'mch_id'     => config('wapwxpayConfig')['mch_id'],
                'notify_url' => Request::domain() . '/wap/index/rechargenotify',
            ];
            $app    = Factory::payment($config);
            $result = $app->order->unify([
                'body'         => '充值订单',
                'out_trade_no' => $rechargeData['order_sn'],
                'total_fee'    => $money * 100,
                'trade_type'   => 'JSAPI', // 请对应换成你的支付方式对应的值类型
                'openid'       => $user['openid'],
            ]);
        }
        if ($jsapi == 2) {
            $config = [
                'app_id'     => config('miniwxpayConfig')['appid'],
                'secret'     => config('miniwxpayConfig')['secret'],
                'key'        => config('miniwxpayConfig')['key'],
                'mch_id'     => config('miniwxpayConfig')['mch_id'],
                'notify_url' => Request::domain() . '/wap/index/rechargenotify',
            ];
            $app    = Factory::payment($config);
            $result = $app->order->unify([
                'body'         => '充值订单',
                'out_trade_no' => $rechargeData['order_sn'],
                'total_fee'    => $money * 100,
                'trade_type'   => 'JSAPI', // 请对应换成你的支付方式对应的值类型
                'openid'       => $user['miniid'],
            ]);
        }

        if ($result['return_code'] == 'FAIL') {
            ajaxmsg($result['return_msg'], 0);
        }
        $jssdk = $app->jssdk;
        $data  = $jssdk->bridgeConfig($result['prepay_id'], false);
        ajaxmsg('true', 1, $data);
    }

    public function rechargenotify()
    {
        $config   = [
            'app_id'     => config('wapwxpayConfig')['appid'],
            'key'        => config('wapwxpayConfig')['key'],
            'mch_id'     => config('wapwxpayConfig')['mch_id'],
            'notify_url' => Request::domain() . '/wap/index/rechargenotify',
        ];
        $app      = Factory::payment($config);
        $response = $app->handlePaidNotify(function ($message, $fail) {
            trace(date('Y-m-d H:i:s') . '==微信公众号充值操作结束==' . var_export($message, true), 'pay');
            $map             = [];
            $map['order_sn'] = $message['out_trade_no'];
            $map['status']   = 0;
            $user_recharge   = Db::name("user_recharge")->where($map)->find();
            if (!$user_recharge) {
                return true;
            }
            if ($message['return_code'] === 'SUCCESS') {
                // return_code 表示通信状态，不代表支付状态
                // 用户是否支付成功
                if ($message['result_code'] === 'SUCCESS') {
                    $user_rechargeData                = [];
                    $user_rechargeData['status']      = 1;
                    $user_rechargeData['update_time'] = time();
                    $user_rechargeData['trade_no']    = $message['transaction_id'];
                    try {
                        $res = Db::name("user_recharge")->where($map)->update($user_rechargeData);
                        (new AccountLog)->accountLog($user_recharge['user_id'], $user_recharge['money'], '用户充值成功', 0, 0, $user_recharge['id'], $message['out_trade_no']);
                    } catch (Exception $e) {
                        return $fail($e->getMessage());
                    }
                    if ($res > 0) {
                        return true;
                    } else {
                        return $fail('服务器异常，请稍后再通知我');
                    }
                } else {
                    return $fail('支付失败，请稍后再通知我');
                }
            } else {
                return $fail('通信失败，请稍后再通知我');
            }
        });
        $response->send(); // Laravel 里请使用：return $response;
    }

    /**
     *微信授权自动登录注册操作
     *合并账号操作
     */
    public function weixinlogin()
    {
        $app   = Factory::officialAccount($this->config);
        $oauth = $app->oauth;
        $oauth->redirect()->send();
    }

    /*
     * Array
    (
        [id] => oslrdwf9P0UP1lHxnrjwbsgCMDyc
        [name] => 老孟编程
        [nickname] => 老孟编程
        [avatar] => http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIdia4y8VRe3otQnb362a3ibXLxFWAbKpSpBRh0BpAHLWvLrn153eGIXuyBneIVD97vCldLJwJ2EViaQ/132
        [email] =>
        [original] => Array
        (
            [openid] => oslrdwf9P0UP1lHxnrjwbsgCMDyc
            [nickname] => 老孟编程
            [sex] => 1
            [language] => zh_CN
            [city] => 郑州
            [province] => 河南
            [country] => 中国
            [headimgurl] => http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIdia4y8VRe3otQnb362a3ibXLxFWAbKpSpBRh0BpAHLWvLrn153eGIXuyBneIVD97vCldLJwJ2EViaQ/132
            [privilege] => Array
            (
            )

            [unionid] => oi0eQ5thaaMmoJMLVEsPFolO4JQs
        )

        [token] => 26_EClrKmcavDfPRhrOadDKoQcQQ8J8wJq0xL6rxwLEsIjVf_DMJWoLZUAKeOE2r7T-4kb1kN2Z13u-It8czsUD0A
        [provider] => WeChat
    )
    */
    public function weixinnotify()
    {
        $app   = Factory::officialAccount($this->config);
        $oauth = $app->oauth;
        // 获取 OAuth 授权结果用户信息
        $user                   = $oauth->user();
        $original               = $user->toArray()['original'];
        $userData['user_name']  = $original['nickname'];
        $userData['nick_name']  = $original['nickname'];
        $userData['avatar']     = $original['headimgurl'];
        $userData['openid']     = $original['openid'];
        $userData['unionid']    = $original['unionid'];
        $userData['reg_time']   = time();
        $userData['last_login'] = time();
        $userData['last_ip']    = Request::ip();


        //校验unionid，小程序和公众号数据互通
        $info = Db::name("user")->where("unionid", "=", $original['unionid'])->find();
        $this->assign('targetUrl', session('targetUrl'));
        if ($info) {
            Db::name("user")->where("unionid", "=", $original['unionid'])->update($userData);
            $this->assign('info', json_encode($info, 320));
            return view();
        } else {
            $token             = create_token();
            $userData['token'] = $token;
            $user_id           = Db::name("user")->insertGetId($userData);
            $info              = Db::name("user")->find($user_id);
            $this->assign('info', json_encode($info, 320));
            return view();
        }
    }

    public function help()
    {
        $id   = input("id", 0);
        $info = Db::name("article")->find($id);
        $this->assign('info', $info);
        return view();
    }

    #礼品卡远程页面
    public function giftcard()
    {
        return view();
    }

    public function _empty()
    {
        return view($this->request->action());
    }
}